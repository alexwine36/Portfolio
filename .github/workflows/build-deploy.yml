name: Build & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - uses: DerYeger/yarn-setup-action@master
        with:
          node-version: 16
  nx-check:
    name: Nx Cloud - Main Job
    uses: nrwl/ci/.github/workflows/nx-cloud-main.yml@v0.6
    with:
      number-of-agents: 5
      parallel-commands: |
        npx nx-cloud record -- yarn nx workspace-lint
      parallel-commands-on-agents: |
        yarn nx affected:libs --target=lint --parallel=3
        yarn nx affected --target=test --parallel=3 --ci --code-coverage
        yarn nx affected --target=build --parallel=3

  agents:
    name: Nx Cloud - Agents
    uses: nrwl/ci/.github/workflows/nx-cloud-agents.yml@v0.6
    with:
      number-of-agents: 5

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: DerYeger/yarn-setup-action@master
        with:
          node-version: 16
      - name: Run tests
        run: yarn test:all
      - name: Copy Coverage
        run: cp coverage/all/cobertura-coverage.xml cobertura-coverage.xml
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.2.0
        with:
          filename: cobertura-coverage.xml
          badge: true
          # fail_below_min: true
          format: markdown
          # hide_branch_rate: false
          # hide_complexity: true
          # indicators: true
          output: both
          # thresholds: '60 80'
      - name: Generate Badges
        run: yarn generate:badge coverage/all/coverage-summary.json -o coverage/all/assets
      - name: Check output
        run: ls -aFG
      - name: Copy Coverage Summary
        run: cp code-coverage-results.md COVERAGE.md
      - name: Upload coverage data
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/all
      - name: Upload coverage-summary files
        uses: actions/upload-artifact@v2
        with:
          name: coverage-summary
          path: COVERAGE.md
  docs:
    name: Docs
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - uses: DerYeger/yarn-setup-action@master
        with:
          node-version: 16
      - name: Build Docs
        run: yarn doc:build

      - name: Upload production-ready built doc files
        uses: actions/upload-artifact@v2
        with:
          name: doc-files
          path: ./dist/apps/docs
  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   needs: prepare
  #   steps:
  #     - uses: DerYeger/yarn-setup-action@master
  #       with:
  #         node-version: 16
  #     - name: Build project
  #       run: yarn build

  #     - name: Upload production-ready build files
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: production-files
  #         path: ./apps/portfolio/public
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [docs, test]
    steps:
      # - name: Download Artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: production-files
      #     path: build
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: doc-files
          path: build
      - name: Download Coverage Artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: build/coverage
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: build
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build

  # release-packages:
  #   name: Build & Release
  #   runs-on: ubuntu-latest
  #   # needs: prepare
  #   if: |
  #     github.ref == 'refs/heads/alpha' || github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Check Commit Type
  #       uses: gsactions/commit-message-checker@v1
  #       with:
  #         pattern: '^((?!skip ci).)*$'
  #         flags: 's'
  #         error: 'Skipping for release commit.'

  #     - uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.GH_ADMIN_TOKEN }}
  #     # - uses: DerYeger/yarn-setup-action@master
  #     #   with:
  #     #     node-version: 16

  #     - name: Configure CI Git User
  #       run: |
  #         git config --global user.name 'alexwine36'
  #         git config --global user.email 'alexwine36@gmail.com'
  #         git remote set-url origin https://alexwine36:$GH_ADMIN_TOKEN@github.com/alexwine36/Portfolio
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}

  #     - name: Install Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 16

  #     - name: Cache
  #       uses: actions/cache@v2
  #       id: npm-cache
  #       with:
  #         path: node_modules
  #         key: nodemodules-${{ hashFiles('yarn.lock') }}
  #         restore-keys: nodemodules-

  #     - name: Install npm dependencies
  #       if: steps.npm-cache.outputs.cache-hit != 'true'
  #       run: |
  #         yarn install

  #     - name: Prerelease
  #       run: yarn release --configuration=prerelease
  #       if: github.ref == 'refs/heads/alpha'
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}

  #     - name: Release
  #       run: yarn release
  #       if: github.ref == 'refs/heads/main'
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}

  release:
    name: release
    if: github.ref == 'refs/heads/main'
    needs: [test, deploy, nx-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
      # - uses: DerYeger/yarn-setup-action@master
      #   with:
      #     node-version: 16
      - name: Configure CI Git User
        run: |
          git config --global user.name 'alexwine36'
          git config --global user.email 'alexwine36@gmail.com'
          git remote set-url origin https://alexwine36:$GH_ADMIN_TOKEN@github.com/alexwine36/Portfolio
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage-summary
          # path: build
      - name: Cache
        uses: actions/cache@v2
        id: npm-cache
        with:
          path: node_modules
          key: nodemodules-${{ hashFiles('yarn.lock') }}
          restore-keys: nodemodules-

      - name: Install npm dependencies
        # if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          yarn install

      - run: ls -aFG
      - run: git config lfs.locksverify false
      - uses: cycjimmy/semantic-release-action@v3
        env:
          GH_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_ADMIN_TOKEN }}
        # env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
